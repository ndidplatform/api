version: 2
jobs:
  build:
    docker:
      - image: circleci/node:12
      - image: ndidplatform/tendermint:latest
        environment:
          TM_RPC_PORT: 45000
        command:
          - genesis
          - --p2p.laddr=tcp://0.0.0.0:47000
          - --rpc.laddr=tcp://0.0.0.0:45000
          - --proxy_app=tcp://localhost:46000
      - image: ndidplatform/abci:latest
        command: ["tcp://0.0.0.0:46000"]
      - image: redis:4-alpine
    steps:
      - checkout
      - restore_cache:
          keys:
            - node12-ndid-logger-dependencies-{{ checksum "ndid-logger/package-lock.json" }}
            # fallback to using the latest cache if no exact match is found
            # - node12-ndid-logger-dependencies-
      - restore_cache:
          keys:
            - node12-main-server-dependencies-{{ checksum "main-server/package-lock.json" }}
            # fallback to using the latest cache if no exact match is found
            # - node12-main-server-dependencies-
      - restore_cache:
          keys:
            - node12-mq-server-dependencies-{{ checksum "mq-server/package-lock.json" }}
            # fallback to using the latest cache if no exact match is found
            # - node12-mq-server-dependencies-
      - restore_cache:
          keys:
            - node12-telemetry-dependencies-{{ checksum "telemetry/package-lock.json" }}
            # fallback to using the latest cache if no exact match is found
            # - node12-telemetry-dependencies-
      - run:
          name: Install node modules for ndid-logger lib
          command: |
            cd ndid-logger
            npm install
      - save_cache:
          paths:
            - ndid-logger/node_modules
          key: node12-ndid-logger-dependencies-{{ checksum "ndid-logger/package-lock.json" }}
      - run:
          name: Install node modules for main-server
          command: |
            cd main-server
            npm install
      - save_cache:
          paths:
            - main-server/node_modules
          key: node12-main-server-dependencies-{{ checksum "main-server/package-lock.json" }}
      - run:
          name: Install node modules for mq-server
          command: |
            cd mq-server
            npm install
      - save_cache:
          paths:
            - mq-server/node_modules
          key: node12-mq-server-dependencies-{{ checksum "mq-server/package-lock.json" }}
      - run:
          name: Install node modules for telemetry
          command: |
            cd telemetry
            npm install
      - save_cache:
          paths:
            - telemetry/node_modules
          key: node12-telemetry-dependencies-{{ checksum "telemetry/package-lock.json" }}

      - run:
          name: Start main-server unit testing
          command: |
            cd main-server
            npm run test:es6
      - run:
          name: Start mq-server unit testing
          command: |
            cd mq-server
            npm run test:es6

      - run:
          name: Set up Development Key
          command: |
            cd main-server
            TENDERMINT_IP=localhost \
            TENDERMINT_PORT=45000 \
            NODE_ID=ndid1 \
            npm run initDev
      - run:
          name: Start service
          command: |
            cd main-server
            NODE_ID=ndid1 \
            NDID_NODE=true \
            ENABLE_TELEMETRY_LOGGING=false \
            npm start
          background: true
      - run:
          name: Start sample testing
          command: |
            sleep 10
            curl -v http://localhost:8080/utility/namespaces
            curl -v http://localhost:8080/utility/idp
            curl -v http://localhost:8080/utility/services
  push_to_docker_hub:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Install/Update Docker
          command: |
            echo "Uninstall Docker"
            sudo apt-get remove docker docker-engine docker.io containerd runc
            echo "Update apt packages"
            sudo apt-get update
            sudo apt-get install \
              apt-transport-https \
              ca-certificates \
              curl \
              gnupg-agent \
              software-properties-common
            echo "Add Docker GPG key"
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo apt-key fingerprint 0EBFCD88
            echo "Add Docker apt repository"
            sudo add-apt-repository \
              "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) \
              stable"
            echo "Install Docker"
            sudo apt-get update
            sudo apt-get install docker-ce docker-ce-cli containerd.io
      - run:
          name: Docker version
          command: |
            docker version
      - run:
          name: Install/Update Docker Compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
      - run:
          name: Docker Compose version
          command: |
            docker-compose version
      - run:
          name: Build docker images
          command: |
            cd docker
            REPO_NAME=${REPO_NAME:-$DOCKER_USER}
            DOCKER_TAG=${DOCKER_TAG:-latest}
            ./build.sh
      - run:
          name: Push to docker hub
          command: |
            if [ ! "$DOCKER_USER"  -o  ! "$DOCKER_PASS"  ]
            then
              echo "Missing required environment variables"
              echo "- DOCKER_USER"
              echo "- DOCKER_PASS"
              exit 1
            fi
            REPO_NAME=${REPO_NAME:-$DOCKER_USER}
            DOCKER_TAG=${DOCKER_TAG:-latest}
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push $REPO_NAME/api:$DOCKER_TAG
            docker push $REPO_NAME/mq:$DOCKER_TAG
            docker push $REPO_NAME/telemetry-client:$DOCKER_TAG
  push_dev_to_docker_hub:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Install/Update Docker
          command: |
            echo "Uninstall Docker"
            sudo apt-get remove docker docker-engine docker.io containerd runc
            echo "Update apt packages"
            sudo apt-get update
            sudo apt-get install \
              apt-transport-https \
              ca-certificates \
              curl \
              gnupg-agent \
              software-properties-common
            echo "Add Docker GPG key"
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo apt-key fingerprint 0EBFCD88
            echo "Add Docker apt repository"
            sudo add-apt-repository \
              "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) \
              stable"
            echo "Install Docker"
            sudo apt-get update
            sudo apt-get install docker-ce docker-ce-cli containerd.io
      - run:
          name: Docker version
          command: |
            docker version
      - run:
          name: Install/Update Docker Compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
      - run:
          name: Docker Compose version
          command: |
            docker-compose version
      - run:
          name: Build docker images
          command: |
            cd docker
            REPO_NAME=${REPO_NAME:-$DOCKER_USER}
            DOCKER_TAG=${DOCKER_TAG_DEV:-development}
            ./build.sh
      - run:
          name: Push to docker hub
          command: |
            if [ ! "$DOCKER_USER"  -o  ! "$DOCKER_PASS"  ]
            then
              echo "Missing required environment variables"
              echo "- DOCKER_USER"
              echo "- DOCKER_PASS"
              exit 1
            fi
            REPO_NAME=${REPO_NAME:-$DOCKER_USER}
            DOCKER_TAG=${DOCKER_TAG_DEV:-development}
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push $REPO_NAME/api:$DOCKER_TAG
            docker push $REPO_NAME/mq:$DOCKER_TAG
            docker push $REPO_NAME/telemetry-client:$DOCKER_TAG

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - push_to_docker_hub:
          filters:
            branches:
              only: master
          requires:
            - build
      - push_dev_to_docker_hub:
          filters:
            branches:
              only: development
          requires:
            - build
